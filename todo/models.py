from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone

from todo.utils import send_mail


# Model —Ç–∏–ø –∫–æ—Ç–µ–ª—å–Ω–æ–π
class TypeBoiler(models.Model):
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞ –∫–æ—Ç–µ–ª—å–Ω–æ–π")
    year = models.PositiveIntegerField(default=2000, verbose_name="–†i–∫ –≤–∏–ø—É—Å–∫—É")

    def __str__(self):
        return self.name


class Board(models.Model):
    name = models.CharField(max_length=30, verbose_name="–ù–∞–∑–≤–∞ –¥–æ—à–∫–∏")

    def __str__(self):
        return self.name


class Profile(models.Model):
    JUN = "J"
    MID = "M"
    SEN = "S"

    LEVEL_OF_OPERATOR = (
        (JUN, "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π"),
        (MID, "–°–µ—Ä–µ–¥–Ωi–π"),
        (SEN, "–°—Ç–∞—Ä—à–∏–π"),
    )

    user = models.OneToOneField(User, on_delete=models.CASCADE)
    is_approved = models.BooleanField(default=False)
    domain = models.ForeignKey("todo.Domain", related_name="profiles")
    level = models.CharField(max_length=1, choices=LEVEL_OF_OPERATOR, default=JUN)
    is_main_operator = models.BooleanField(default=False)
    type_boiler = models.ManyToManyField(TypeBoiler)

    def __unicode__(self):
        return "%s %s" % (self.user.first_name, self.user.last_name)

    def is_admin(self):
        return self.user == self.domain.admin


class Domain(models.Model):
    name = models.TextField(max_length=140)
    admin = models.ForeignKey(User, null=True, blank=True, related_name="domains")

    def __unicode__(self):
        return self.name


class Todo(models.Model):
    ACTIVE = "A"
    PENDING = "P"
    DONE = "D"
    CANCELLED = "C"

    LOW = "L"
    STANDARD = "S"
    HIGH = "H"

    STATUS = (
        (ACTIVE, "–ê–∫—Ç–∏–≤–Ω–∞"),
        (PENDING, "–û—á—ñ–∫—É—î –Ω–∞ —Ä–æ–∑–≥–ª—è–¥"),
        (DONE, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"),
        (CANCELLED, "–í—ñ–¥–º—ñ–Ω–µ–Ω–æ"),
    )

    PRIORITY = (
        (LOW, "üòå –ù–∏–∑—å–∫–∏–π"),
        (STANDARD, "üòÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π"),
        (HIGH, "üî• –í–∏—Å–æ–∫–∏–π"),
    )

    board = models.ForeignKey(Board, on_delete=models.CASCADE, verbose_name="–î–æ—à–∫–∞")
    assignee = models.ForeignKey(
        User, on_delete=models.CASCADE, verbose_name="–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å",
        related_name='assigned', null=True, blank=True
    )
    assignor = models.ForeignKey(
        User, on_delete=models.CASCADE, verbose_name="–°—Ç–≤–æ—Ä—é–≤–∞—á",
        related_name='assignor', null=True, blank=True
    )

    title = models.CharField(max_length=140, verbose_name="–¢–∏—Ç—É–ª—å–Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è")
    task = models.TextField(max_length=255, verbose_name="–£–º–æ–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è")
    status = models.CharField(
        max_length=1, choices=STATUS, default=ACTIVE, verbose_name="–°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è"
    )
    priority = models.CharField(
        max_length=1, choices=PRIORITY, default=STANDARD, verbose_name="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
    )
    image = models.ImageField(null=True, blank=True, verbose_name="–°–∫—Äi–Ω—à–æ—Ç –ø–æ–∫–∞–∑–Ω–∏–∫–∞")

    # units for dispatcher
    temperature = models.IntegerField(
        default=0, null=True, blank=True, verbose_name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ—Ç–µ–ª—å–Ωi"
    )
    heat_meter = models.IntegerField(
        default=0, null=True, blank=True, verbose_name="–õ—ñ—á–∏–ª—å–Ω–∏–∫ —Ç–µ–ø–ª–∞"
    )
    water_leak = models.BooleanField(default=False, verbose_name="–í–∏—Ç—ñ–∫ –≤–æ–¥–∏")
    flooding = models.BooleanField(default=False, verbose_name="–ó–∞—Ç–æ–ø–ª–µ–Ω–Ω—è")

    created = models.DateTimeField(auto_now_add=True, verbose_name="–°—Ç–≤–æ—Ä–µ–Ω–∞")
    deadline = models.DateField(
        default=timezone.now(), verbose_name="–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞", blank=True, null=True
    )
    time = models.PositiveSmallIntegerField(
        default=0, verbose_name="–ß–∞—Å–∏ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", blank=True, null=True
    )

    def __unicode__(self):
        return self.task


class Review(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    task = models.ForeignKey(Todo, on_delete=models.CASCADE)
    review = models.TextField(max_length=1000)


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        domain_name = instance.email.split("@")[1]
        domain, domain_created = Domain.objects.get_or_create(name=domain_name)
        Profile.objects.create(user=instance, domain=domain)

        if domain_created:
            instance.profile.is_approved = True
            instance.profile.save()
            domain.admin = instance
            domain.save()
        else:
            send_mail(
                subject="New registration request",
                body="%s has registered with your domain." % instance.email,
                to=domain.admin.email,
            )


@receiver(post_save, sender=Todo)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        assignor = instance.todo.assignor.email.split("@")[1]
        todo = instance

        if todo:
            body_message = f"""
                   –ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–æ–º,
                   –æ—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è:
                   –ø—Ä–æ–π–¥–µ–Ω–æ —á–∞—Å—É: {instance.todo.time};
                   —Äi–∑–Ω–∏—Ü—è –ºi–∂ –ø—Ä–æ–π–¥–µ–Ω–∏–º —á–∞—Å–æ–º —Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–º —á–∞—Å–æ–º: {instance.todo.time - instance.todo.stock_time};

                   –∑–≤—ñ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {instance.todo.report}
                   """

            send_mail(
                subject="New registration request",
                body=body_message,
                to=assignor,
            )


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()
